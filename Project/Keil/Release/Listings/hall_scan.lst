C51 COMPILER V9.60.7.0   HALL_SCAN                                                         05/31/2024 17:16:41 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE HALL_SCAN
OBJECT MODULE PLACED IN .\Release\Objects\hall_scan.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\hall_scan.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000C) 
                    -INCDIR(..\..\Libraries\Include;..\..\User;..\..\User\lib;..\..\Hardware) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\
                    -Listings\hall_scan.lst) TABS(2) OBJECT(.\Release\Objects\hall_scan.obj)

line level    source

   1          #include "hall_scan.h"
   2          
   3          // 多少个脉冲表示一圈
   4          #ifndef PULSE_PER_TURN
   5          #define PULSE_PER_TURN 16
   6          #endif
   7          
   8          // 一圈表示多少厘米
   9          #ifndef CM_PER_TURN
  10          #define CM_PER_TURN xxx
  11          #endif
  12          
  13          volatile u32 pulse_cnt = 0; // 脉冲计数值
  14          
  15          // volatile u8 flag_p13 = 0;
  16          
  17          // 霍尔扫描的配置
  18          void hall_scan_config(void)
  19          {
  20   1          // 使用IO中断来对脉冲计数
  21   1          __SetIRQnIP(P1_IRQn, P1_IQn_CFG); // 设置中断优先级
  22   1          __EnableIRQ(P1_IRQn);             // 使能P1中断
  23   1          IE_EA = 1;                        // 使能总开关
  24   1      
  25   1          P1_MD0 &= ~GPIO_P13_MODE_SEL(0x3); // 输入模式
  26   1          P1_PD |= GPIO_P13_PULL_PD(0x1);    // 配置为下拉
  27   1          P1_IMK |= GPIO_P13_IRQ_MASK(0x1);  // 使能IO中断
  28   1          P1_TRG0 &= ~GPIO_P13_TRG_SEL(0x3);
  29   1          P1_TRG0 |= GPIO_P13_TRG_SEL(0x2); // 配置上升沿触发
  30   1      }
  31          
  32          void hall_scan(void)
  33          {
  34   1          static u8 tmr_enable_flag = 0; // 定时器打开/关闭的标志位
  35   1      
  36   1          u32 tmp = 0;
  37   1      
  38   1          if (0 == tmr_enable_flag)
  39   1          {
  40   2              tmr_enable_flag = 1;
  41   2              pulse_cnt = 0;
  42   2              tmr1_enable();
  43   2          }
  44   1      
  45   1          if (tmr1_cnt >= 2500)
  46   1          {
  47   2              tmp = pulse_cnt;
  48   2              // pulse_cnt = 0;
  49   2      
  50   2              printf("tmr1_cnt: %ld\n", tmr1_cnt);
  51   2      
  52   2              tmr1_disable();
  53   2              tmr1_cnt = 0;
C51 COMPILER V9.60.7.0   HALL_SCAN                                                         05/31/2024 17:16:41 PAGE 2   

  54   2              tmr_enable_flag = 0;
  55   2      
  56   2              printf("pulse cnt: %ld\n", tmp);
  57   2          }
  58   1      
  59   1          // printf("pulse cnt: %ld\n", pulse_cnt);
  60   1      
  61   1          // delay_ms(500);
  62   1      }
  63          
  64          // P1中断服务函数
  65          void P1_IRQHandler(void) interrupt P1_IRQn
  66          {
  67   1          // Px_PND寄存器写任何值都会清标志位
  68   1          u8 p1_pnd = P1_PND;
  69   1      
  70   1          // 进入中断设置IP，不可删除
  71   1          __IRQnIPnPush(P1_IRQn);
  72   1          // ---------------- 用户函数处理 -------------------
  73   1          if (p1_pnd & GPIO_P13_IRQ_PNG(0x1))
  74   1          {
  75   2              pulse_cnt++;
  76   2      
  77   2      //        flag_p13 = !flag_p13;
  78   2          }
  79   1          P1_PND = p1_pnd; // 清P1中断标志位
  80   1          // -------------------------------------------------
  81   1          // 退出中断设置IP，不可删除
  82   1          __IRQnIPnPop(P1_IRQn);
  83   1      }
  84          
  85          // P2中断服务函数
  86          void P2_IRQHandler(void) interrupt P2_IRQn
  87          {
  88   1          // Px_PND寄存器写任何值都会清标志位
  89   1          u8 p2_pnd = P2_PND;
  90   1          // 进入中断设置IP，不可删除
  91   1          __IRQnIPnPush(P2_IRQn);
  92   1          // ---------------- 用户函数处理 -------------------
  93   1          if (p2_pnd & GPIO_P25_IRQ_PNG(0x1))
  94   1          {
  95   2              pulse_cnt++;
  96   2          }
  97   1          P2_PND = p2_pnd; // 清P2中断标志位
  98   1          // -------------------------------------------------
  99   1          // 退出中断设置IP，不可删除
 100   1          __IRQnIPnPop(P2_IRQn);
 101   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    376    ----
   CONSTANT SIZE    =     31    ----
   XDATA SIZE       =      5       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
